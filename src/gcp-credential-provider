#!/usr/bin/python3

import sys
import json
import logging
import argparse
import subprocess
import re


def configure_logging(log_level, log_file=None):
    logger = logging.getLogger()
    logger.setLevel(log_level)

    if log_file:
        log_handler = logging.FileHandler(log_file)
    else:
        log_handler = logging.StreamHandler(sys.stderr)
    log_handler.setLevel(log_level)

    # Create a formatter and set it on the handler
    formatter = logging.Formatter('%(levelname)s: %(message)s')
    log_handler.setFormatter(formatter)

    # Add the stderr handler to the logger
    logger.addHandler(log_handler)


def read_json_from_stdin():
    # Read the input JSON from stdin
    json_data = sys.stdin.read()

    try:
        # Parse the JSON data
        parsed_data = json.loads(json_data)
        return parsed_data
    except json.JSONDecodeError as e:
        logging.error("Error: Invalid JSON - %s", str(e))
        sys.exit(1)

def get_image_repository(url: str):
    url_parse = re.compile(r"([a-z0-9-\.]*)/.*")

    return url_parse.match(url).group(1)


def get_credentials(registry: str):
    command = 'docker-credential-gcr get'

    try:
        # Run the command as a subprocess
        process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

        # Pass stdin text to the subprocess
        stdout, stderr = process.communicate(input=f"https://{registry}".encode())
    except subprocess.CalledProcessError as e:
        print(f"Command execution failed with return code {e.returncode}")
        sys.exit(1)

    if process.returncode != 0:
        logging.error(f"Error: {stderr}")
        exit(1)

    # Parse the command output as JSON
    try:
        return json.loads(stdout)
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON - {str(e)}")
        sys.exit(1)


def credential_response(registry, username, password):
    response = {
        "apiVersion": "credentialprovider.kubelet.k8s.io/v1",
        "kind": "CredentialProviderResponse",
        "cacheKeyType": "Registry",
        "auth": {
            f"{registry}": {
                "username": str(username),
                "password": str(password)
            }
        }
    }
    print(json.dumps(response), end=None,)


if __name__ == '__main__':
    # Configure argparse
    parser = argparse.ArgumentParser(description='Read JSON from stdin')
    parser.add_argument('-v', '--verbose', action='store_true', help='enable verbose logging')
    parser.add_argument('--log-file', default=None, help='Sendo logs to file')
    args = parser.parse_args()

    # Configure logging
    log_level = logging.DEBUG if args.verbose else logging.INFO
    configure_logging(log_level, args.log_file)

    # Call the function to read JSON from stdin
    json_data = read_json_from_stdin()
    logging.debug("Request JSON data: %s", json_data)

    repository = get_image_repository(json_data["image"])

    credentials = get_credentials(repository)
    logging.debug("Registry: %s Credential User: %s", repository, credentials["Username"])

    credential_response(repository, credentials["Username"], credentials["Secret"])
